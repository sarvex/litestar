name: Tests And Linting

on:
  pull_request:
  push:
    branches:
      - main
      - v1.51

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          allow-prereleases: true

      - name: Install Pre-Commit
        run: python -m pip install pre-commit && pre-commit install

      - name: Load cached Pre-Commit Dependencies
        id: cached-pre-commit-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute Pre-Commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          allow-prereleases: true

      - uses: pdm-project/setup-pdm@v3
        name: Set up PDM
        with:
          python-version: "3.8"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install -G:all

      - name: Run mypy
        run: pdm run mypy

  pyright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          allow-prereleases: true

      - uses: pdm-project/setup-pdm@v3
        name: Set up PDM
        with:
          python-version: "3.8"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install -G:all

      - name: Run pyright
        run: pdm run pyright

  test:
    name: "test (${{ matrix.python-version }}, pydantic@${{ matrix.pydantic-version }})"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        pydantic-version: ["1", "2"]
    uses: ./.github/workflows/test.yml
    with:
      coverage: ${{ matrix.python-version == '3.12' && matrix.pydantic-version == '2' }}
      pydantic-version: ${{ matrix.pydantic-version }}
      python-version: ${{ matrix.python-version }}

  test-platform-compat:
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "windows-latest"]
    uses: ./.github/workflows/test.yml
    with:
      python-version: "3.12"
      pydantic-version: "2"
      os: ${{ matrix.os }}
      timeout: 15

  sonar:
    needs:
      - test
      - validate
    if: github.event.pull_request.head.repo.fork == false && github.repository_owner == 'litestar-org'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: coverage-xml
      - name: Fix coverage file for sonarcloud
        run: sed -i "s/home\/runner\/work\/litestar\/litestar/github\/workspace/g" coverage.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  codeql:
    needs:
      - test
      - validate
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL Without Dependencies
        uses: github/codeql-action/init@v2
        with:
          setup-python-dependencies: false

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-docs:
    needs:
      - validate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          allow-prereleases: true

      - uses: pdm-project/setup-pdm@v3
        name: Set up PDM
        with:
          python-version: "3.12"
          allow-python-prereleases: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Install dependencies
        run: pdm install -G:all

      - name: Build docs
        run: pdm run make docs

      - name: Check docs links
        env:
          LITESTAR_DOCS_IGNORE_MISSING_EXAMPLE_OUTPUT: 1
        run: pdm run make docs-linkcheck

      - name: Save PR number
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: echo $PR_NUMBER > .pr_number

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docs-preview
          path: |
            docs/_build/html
            .pr_number
